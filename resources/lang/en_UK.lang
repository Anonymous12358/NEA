.name=English (United Kingdom)
.warning="~WARNING~ "^
.error="##ERROR## "^
error.file_absent.lang=The required lang file {language} cannot be found in resources/lang. Text will revert to language keys.
error.file_absent.datapack_schema=datapack/schema.yml is missing. Reinstall the game or restore files from backup.
error.file_absent.save_schema=save_schema.yml is missing. Reinstall the game or restore files from backup.
error.datapack.invalid.schema=datapack/schema.yml is invalid (did you change it?). Reinstall the game or restore files from backup.
error.datapack.datapack_absent=Datapack {pack} can't be loaded because the expected file is missing or restricted.
error.datapack.invalid_json=Datapack {pack} can't be loaded because the file isn't valid json.
error.datapack.invalid_by_schema=A datapack file is invalid.
error.datapack.circular.dependency=Datapacks can't be loaded because of a circular dependency involving pack {pack1}.
error.datapack.circular.load_after=Datapacks can't be loaded because of a circular relationship caused by load_after, involving pack {pack}.
error.datapack.inconsistent_name=Can't load the pack {file} because it calls itself {pack}.
warning.datapack.double_load_after=Datapack {pack} lists a datapack in both dependencies and load_after.
error.datapack.invalid_override=Datapack {pack} declares an override for {name}, but {dependency} doesn't register that name
error.datapack.hidden_dependency=Datapack {pack} uses a name from {dependency} but doesn't declare it as a dependency or load_after.
error.datapack.unqualified_name=Datapack {pack} contains unqualified name "{name}".
error.datapack.no_min_or_max=Datapack {pack} contains a condition with neither a minimum nor a maximum value.
error.datapack.invalid_pattern=Datapack {pack} contains invalid pattern "{pattern}".
error.datapack.unregistered_score=Datapack {pack} contains a reference to score "{name}", which has not been registered.
error.datapack.anonymous_restriction=Datapack {pack} contains an anonymous top-level restriction.
error.load_game.game_file_absent=The expected save file is missing or restricted.
error.load_game.invalid_json=The save file can't be loaded because the file isn't valid json.
error.load_game.invalid_schema=save_schema.yml is invalid (did you change it?). Reinstall the game or restore files from backup.
error.load_game.invalid_by_schema=The save file isn't valid.
error.load_game.invalid_board=The save file contains an invalid board.
error.load_game.invalid_scores=The save file contains invalid scores.
warning.load_game.invalid_num_players=Numbers of players other than two are not currently supported. Treating it as two players.
cli.prompt=">>> "^
cli.help_prompt=Type "help" for a list of commands.
cli.invalid_command=Invalid arguments for command. Type "help" for a list of commands.
cli.unknown_command=Unknown command. Type "help" for a list of commands.
cli.login.no_space=At most two accounts can be signed in at the same time.
cli.login.password_prompt="Password: "^
cli.login.incorrect_details=Your username or password is incorrect.
cli.login.ok=Login successful.
cli.logout.bad_format=First argument should be the number of the logged-in account to log out.
cli.logout.not_logged_in=No account is logged in at that index.
cli.logout.ok=Logout successful.
cli.list_accounts.none=No accounts are logged in.
cli.list_accounts.one=One account is logged in: {account}
cli.list_accounts.two=Two accounts are logged in: {account1} and {account2}
cli.index_not_logged_in=No account is logged in at that index.
cli.set_color.bad_format=First argument should be the number of the logged-in account of which to set the colour.
cli.set_color.bad_color=Second argument should be the name of the colour to use.
cli.set_color.ok=Colour changed successfully. This will take effect when you start a new game.
cli.register.duplicate_username=An account with this username already exists.
cli.register.ok=Account registration successful.
cli.load_data.error=Data could not be loaded due to an error.
cli.list_datapacks.none=No datapacks are loaded.
cli.list_datapacks.some=The following datapacks are loaded: {packs}.
cli.concede.no_game=You must create a game before you can concede it.
cli.save_game.ok=Save stored in {file_name}
cli.save_game.no_game=You must create a game before you can save it.
cli.toggle.on=on^
cli.toggle.off=off^
cli.toggle_autosave=Autosaving is now turned {mode}.
cli.toggle_track_stats=Stats are now turned {mode}.
cli.undo.autosaving_off=Autosaving is off. If you're sure the autosave file is for the current game, type `autosave` and then repeat `undo`.
cli.undo.no_game=You must create a game before you can undo moves in it.
cli.undo.no_data=No autosave file is present, so undoing is not possible.
cli.difficulty.bad_format=Invalid difficulty. Should be between 0 and 1 inclusive.
cli.difficulty.ok=Difficulty set.
cli.ai_suggestion.invalid=Can't suggest a move. Either there is no game in progress, or the game in progress is not pente.
cli.ai_suggestion.ok=The highest-rated move is: {move}
cli.show_stats.bad_format=First argument should be the number of the logged-in account of which to get the stats.
cli.show_stats.ok={wins} games won by {reason}
cli.clear_stats.bad_format=First argument should be the number of the logged-in account of which to clear the stats.
cli.clear_stats.ok=Cleared all statistics for that player.
cli.move.bad_format=Move in bad format
cli.move.no_game=You must create a game before you can move in it.
cli.move.illegal=That move is invalid. It may be outside the board, on top of an existing stone, or forbidden by restrictions.
cli.launch.already_playing=Exit the current game to launch a new one.
cli.launch.no_data=The game can't be launched because data loading failed.
cli.output.score.one_score={display_name}: {values}
cli.output.score.header=Scores for player {player}:
cli.output.score.score={display_name}: {value}
cli.output.turn.who=It's player {player}'s turn
cli.output.turn.you=It's your turn
cli.output.victory.who=Player {player} wins!
cli.output.victory.you=Congratulations. You win!
cli.confirm.positive_response=y^
cli.confirm.concede="Are you sure you wish to concede? (y/n) "^
cli.confirm.exit="Are you sure you wish to exit the application? (y/n) "^
cli.confirm.clear_stats="Are you sure you wish to clear all stats for that user? (y/n) "^
cli.help.help=Display a list of commands
cli.help.register=Register an account with a given username; password entered separately
cli.help.login=Login the given account (must be registered)
cli.help.logout=Logout the given account by account index
cli.help.listaccounts=List which accounts are currently logged in
cli.help.color=Set the colour to use to represent pieces belonging to a given account, by account index
cli.help.data=Load a set of datapacks; the next game launched will use those datapacks
cli.help.listdata=List the currently loaded datapacks
cli.help.play=Launch a game with the currently loaded datapacks. If no datapacks are loaded, loads pente first. If datapacks are specified as arguments, loads those packs first.
cli.help.concede=Concede the current game
cli.help.move=Make a move in the current game at the given coordinates
cli.help.save=Save the current game into the saves folder. The file is named according to the date and time.
cli.help.load=Load a saved game from the save folder, by the given file name.
cli.help.autosave=Toggle whether or not the game is automatically saved into saves/autosave.json before every move. On by default.
cli.help.undo=Restore the last autosave, which is most likely the state of the game before the previous move
cli.help.difficulty=Set the difficulty rating of the ai. 0 is the hardest difficulty; 30 is very easy.
cli.help.aimove=Have the ai suggest a move. To play against the ai, use this command and then manually input the move on its turn.
cli.help.trackstats=Toggle whether statistics are tracked. If on, when a game ends, the winner and win reason are recorded. Off by default.
cli.help.showstats=Display the number of games a given account, by account index, has won in a given way. Default win reasons are gomoku.victory for five in a row, pente.captures, and .concede. .all to display all reasons.
cli.help.clearstats=Clear all statistics for a given account by account index
cli.help.exit=Exit the application. No saves are made or statistics tracked.
warning.lang.bad_line=Invalid line in lang file: {line}. Skipping it.
color.default=default^
color.black=black^
color.red=red^
color.green=green^
color.yellow=yellow^
color.blue=blue^
color.magenta=purple^
color.cyan=teal^
color.white=silver^
color.bright_black=grey^
color.bright_red=bright_red^
color.bright_green=bright_green^
color.bright_yellow=bright_yellow^
color.bright_blue=bright_blue^
color.bright_magenta=pink^
color.bright_cyan=cyan^
color.bright_white=white^
gui.help=Help\nRow 1: Shift-click to exit the application / concede the current game\nRow 2: Enter username and password; register new account (does not log in)\nRow 3: Shift-click username to log out\nRow 4: Print statistics of account above button to console; toggle tracking statistics (off by default)\nRow 5: Enter difficulty (0 is hardest); set difficulty; get AI suggestion (does not make move)\nRow 6: Enter name of save file without ".json"; save current game by entered file name; load saved game by entered file name\nRow 7: Load variant by name\nRow 8: Toggle saving after each move (on by default); undo (loads autosave; requires autosaving to be on); launch game (requires variant to be loaded)
gui.name=Pente^
gui.button.help=Help^
gui.button.exit=Exit^
gui.button.concede=Concede^
gui.button.register=Register^
gui.button.empty_account=empty^
gui.button.login=Login^
gui.button.stats=Stats^
gui.button.toggle_stats=Track^
gui.button.set_difficulty=Difficulty^
gui.button.ai_move=AI Move^
gui.button.save=Save^
gui.button.load=Load^
gui.button.autosave=Autosave^
gui.button.undo=Undo^
gui.button.play=Play^
gui.show_stats.header=Stats:
gui.show_stat.stats={wins} games won by {reason}
gui.victory=P{player} wins!^